# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The python orb contains a set of prepackaged circleci configuration you can use repeatedly in your configurations files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  win: circleci/windows@2.2.0
  macos: circleci/macos@2.4.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
  # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
  test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.7
#    environment:
#      DISPLAY: mymachine.com:0.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - add_ssh_keys
      - checkout
      - python/install-packages:
          pkg-manager: pip
          app-dir: PyQT5_fbs/requirements  # If you're requirements.txt isn't in the root directory.
          pip-dependency-file: base.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
          pypi-cache: false
      - run:
          name: Run tests
          command: python -m unittest
  build-linux:
    machine: # executor type
      image: ubuntu-2004:202010-01 # # recommended linux image - includes Ubuntu 20.04, docker 19.03.13, docker-compose 1.27.4
#    macos:
#      xcode: 11.7.0
    environment:
#      HOMEBREW_NO_AUTO_UPDATE: 1
      FL_OUTPUT_DIR: output
      PYTHON_CONFIGURE_OPTS: --enable-shared
    steps:
      - add_ssh_keys
      - checkout
      - store_test_results:
          path: output/scan
      - store_artifacts:
          path: output
      - run: rsync --version
      - attach_workspace:
          at: src

      - run: echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bash_profile
      - run: echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bash_profile
      - run: git clone https://github.com/pyenv/pyenv.git ~/.pyenv
      - run: echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n  eval "$(pyenv init -)"\nfi' >> ~/.bash_profile
      - run: sudo apt update
      - run: sudo apt install ruby
      - run: gem install dotenv -v 2.8.1
      - run: gem install fpm
      - run: echo $PYTHON_CONFIGURE_OPTS && cd PyQT5_fbs && pyenv install 3.6.7
#      - run: cd PyQT5_fbs && pyenv versions
      - run:
          name: Activate python 3.6.7 and install requirements
          command: cd PyQT5_fbs && pyenv local 3.6.7 && pyenv versions && pip3 install -r requirements/linux.txt
      - run:
          name: Build uTide hook
          command: cd PyQT5_fbs && python make_hooks.py
      - run:
          name: Freeze the app
          command: cd PyQT5_fbs && fbs freeze
      - run:
          name: Build the deb file
          command: cd PyQT5_fbs && fbs installer
#      - run: cd PyQT5_fbs/target
      - attach_workspace:
          at: src
      - run:
          name: Copy the deb file to wyrtki
          command: |
           export VERSION=`grep version PyQT5_fbs/src/build/settings/base.json | grep -v app_name | cut -f4 -d\"`
           cd PyQT5_fbs/target
           echo 'wyrtki.soest.hawaii.edu ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAJJyf1/zR4Lt5IA/+dY1VIqBHi5ZUx9/PYIYiHEW6b8rZBnR7gu7U7iqJiBn3Ob9m3YpQgqZD47zaaaHQ/Ykkc=' >> ~/.ssh/known_hosts
           rsync -va ./UHSLC-QC.deb komar@wyrtki.soest.hawaii.edu:/srv/htdocs/uhslc.soest.hawaii.edu/tech/fd_tool/UHSLC-QC_$VERSION.deb
  build-mac:
    macos:
      xcode: "14.2.0"
    resource_class: macos.m1.medium.gen1
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
      FL_OUTPUT_DIR: output
      PYTHON_CONFIGURE_OPTS: --enable-framework
    steps:
      - macos/install-rosetta
      - add_ssh_keys
      - checkout
      # Commands will execute in macOS container
      # with Xcode 12.5.1 installed
      - store_test_results:
          path: output/scan
      - store_artifacts:
          path: output
      - run: rsync --version
      - attach_workspace:
          at: src

      - run:
          name: install conda bits
          command: |
            mkdir -p ~/miniconda3
            curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o ~/miniconda3/miniconda.sh
            bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
            rm -rf ~/miniconda3/miniconda.sh
            ~/miniconda3/bin/conda init bash
      - run:
          name: create python 3.6.7 environment
          command: |
            source ~/.bash_profile
            conda create -y -q -n py367 python==3.6.7
            conda activate py367
            python -m pip install --upgrade pip
            python -V
            echo 'conda activate py367' >> ~/.bash_profile
      - run: brew install freetype pkg-config libpng pyenv openssl readline sqlite3 xz zlib
      - run: brew reinstall zlib bzip2
      - run: sudo rm -rf /Library/Developer/CommandLineTools
      - run: xcode-select --install
      - run:
          name: Install requirements
          command: cd PyQT5_fbs && pip install -r requirements/mac.txt
      - run:
          name: Build uTide hook
          command: cd PyQT5_fbs && python make_hooks.py
      - run:
          name: Freeze the app
          command: cd PyQT5_fbs && fbs freeze
      - run:
          name: Build the dmg file
          command: cd PyQT5_fbs && fbs installer
#      - run: cd PyQT5_fbs/target
      - attach_workspace:
          at: src
      - run:
          name: Copy the dmg file to wyrtki
          command: |
           export VERSION=`grep version PyQT5_fbs/src/build/settings/base.json | grep -v app_name | cut -f4 -d\"`
           cd PyQT5_fbs/target
           echo 'wyrtki.soest.hawaii.edu ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBAJJyf1/zR4Lt5IA/+dY1VIqBHi5ZUx9/PYIYiHEW6b8rZBnR7gu7U7iqJiBn3Ob9m3YpQgqZD47zaaaHQ/Ykkc=' >> ~/.ssh/known_hosts
           rsync -va ./UHSLC-QC.dmg komar@wyrtki.soest.hawaii.edu:/srv/htdocs/uhslc.soest.hawaii.edu/tech/fd_tool/UHSLC-QC_$VERSION.dmg
  build-win:
    executor: win/default
    environment:
      FL_OUTPUT_DIR: output
    steps:
      - checkout
      - run:
          name: Install and set Python 3.6.7
          shell: powershell.exe
          command: |
            choco install pyenv-win --force
            refreshenv
            pyenv install 3.6.7
            pyenv global 3.6.7
            $env:Path = 'C:\Users\circleci\.pyenv\pyenv-win\bin;C:\Users\circleci\.pyenv\pyenv-win\shims;' + $env:Path
            python --version
            cd PyQT5_fbs
            pyenv local 3.6.7
            c:\users\circleci\.pyenv\pyenv-win\versions\3.6.7\python.exe -m pip install -r requirements/windows.txt
            pyenv versions
            [System.Environment]::SetEnvironmentVariable('PYENV',$env:USERPROFILE + "\.pyenv\pyenv-win\","User")
            [System.Environment]::SetEnvironmentVariable('PYENV_ROOT',$env:USERPROFILE + "\.pyenv\pyenv-win\","User")
            [System.Environment]::SetEnvironmentVariable('PYENV_HOME',$env:USERPROFILE + "\.pyenv\pyenv-win\","User")
            Get-Location
            c:\users\circleci\.pyenv\pyenv-win\versions\3.6.7\python.exe -m fbs freeze
#      - run:
#          name: Build uTide hook
#          shell: powershell.exe
#          command: |
#            cd PyQT5_fbs
#            python make_hooks.py
#      - run:
#          name: Freeze the app
#          shell: powershell.exe
#          command: |
#            cd PyQT5_fbs
#            python --version
#            fbs freeze

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test_build:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    jobs:
      - test
#      - build-linux
      - build-linux:
          requires: 
            - test
          filters:
            branches:
              only:
                - master
            tags:
              only: /^\d+\.\d+\.\d+$/  # This will only run on tags that look like a version number, e.g. 1.0.0
      - build-mac:
          requires:
            - test
          filters:
            branches:
              only:
                - master
            tags:
              only: /^\d+\.\d+\.\d+$/  # This will only run on tags that look like a version number, e.g. 1.0.0
#      - build-win
#          requires:
#            - test
#          filters:
#            branches:
#              only:
#                - master
#            tags:
#              only: /^\d+\.\d+\.\d+$/  # This will only run on tags that look like a version number, e.g. 1.0.0
